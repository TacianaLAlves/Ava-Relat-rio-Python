---
title: "INTRODUÇÃO AOS SOFTWARES ESTATÍSTICOS"
subtitle: "Relatório em Quarto + GitHub"
author: "Taciana de Luna Alves" # Autora
lang: pt # Linguagem em português
date: "`r format(Sys.Date())`" # Data do relatório
date-format: short # Formato de data curto: dd/MM/yyyy 
toc: true # Adiciona um índice no relatório
editor: visual
format: 
    html: 
      css: ["custom.css"] 
      code-fold: false
      code-tools: true
      theme: 
        light: cosmo
        dark: vapor # Sugestão: superhero/vapor Mudar o tema do relatório aqui
execute:
  warning: false
  message: false
reference-location: margin
citation-location: margin
#bibliography: references.bib
self-contained-math: true
embed-resources: true
---

### **Git e GitHub**

#### **1. O que são?**

-   **Git**: É um sistema de controle de versão distribuído usado para rastrear alterações em arquivos de código-fonte durante o desenvolvimento de software. Foi criado por Linus Torvalds em 2005.

-   **GitHub**: É uma plataforma de hospedagem baseada em nuvem que utiliza o Git para versionamento. Ela permite que desenvolvedores colaborem em projetos, armazenem repositórios e gerenciem workflows.

#### **2. Para que servem?**

-   **Git**: é um sistema de controle de versão que acompanha as alterações nos arquivos de forma inteligente. O Git é particularmente útil quando você e um grupo de pessoas fazem alterações nos mesmos arquivos ao mesmo tempo.

    Normalmente, para fazer isso em um fluxo de trabalho baseado no Git, você deve:

    -   Controla o histórico de alterações em projetos.

    -   Facilita o trabalho em equipe (mesclando mudanças de diferentes colaboradores).

    -   Permite reverter para versões anteriores em caso de erros.

-   **GitHub**: O GitHub é uma plataforma baseada em nuvem em que é possível armazenar, compartilhar e trabalhar com outras pessoas para escrever códigos.

    O seguinte é possível ao armazenar códigos em um "repositório" no GitHub:

    -   Hospeda repositórios Git remotamente.

    -   Permite que outras pessoas revisem o seu código e deem sugestões para melhorá-lo.

    -   Oferece ferramentas adicionais como *issues*, *pull requests* e integração contínua (CI/CD).

    -   Funciona como uma rede social para desenvolvedores (compartilhamento de projetos *open source*).

        O trabalho colaborativo, uma das características fundamentais do GitHub, é possível graças ao software de código aberto Git, que serviu como base para a criação do GitHub.

        +------------------------------------------------------------------------------------------------------------------------------------------+
        | **Comandos Básicos**                                                                                                                     |
        |                                                                                                                                          |
        | +-----------------------------------+--------------------------------------------------------------------------------------------------+ |
        | | **Comando**                       | **Função**                                                                                       | |
        | +:==================================+:=================================================================================================+ |
        | | git init                          | Inicializa um novo repositório Git local.                                                        | |
        | +-----------------------------------+--------------------------------------------------------------------------------------------------+ |
        | | git add                           | Adiciona arquivos ao *staging area* (preparação para commit). Ex: git add . (todos os arquivos). | |
        | +-----------------------------------+--------------------------------------------------------------------------------------------------+ |
        | | git commit                        | Registra as alterações no repositório com uma mensagem descritiva. Ex: git commit -m "mensagem". | |
        | +-----------------------------------+--------------------------------------------------------------------------------------------------+ |
        | | git push                          | Envia commits locais para um repositório remoto (ex: GitHub).                                    | |
        | +-----------------------------------+--------------------------------------------------------------------------------------------------+ |
        | | git pull                          | Atualiza o repositório local com alterações do remoto (fetch + merge).                           | |
        | +-----------------------------------+--------------------------------------------------------------------------------------------------+ |
        +:=========================================================================================================================================+
        +------------------------------------------------------------------------------------------------------------------------------------------+

#### **4. Conceitos Importantes**

-   **Repositório**:

    -   É um diretório onde o Git rastreia as alterações dos arquivos. Pode ser local (na sua máquina) ou remoto (ex: no GitHub).

-   **Commit**:

    -   É um "snapshot" (registro) das alterações feitas nos arquivos em um determinado momento. Cada commit tem um *hash* único (ID) e uma mensagem descritiva.

### **PIP: Gerenciador de Pacotes do Python**

#### **1. O que é o pip?**

O pip (*Pip Installs Packages*) é o gerenciador de pacotes padrão para Python. Ele permite:

-   Instalar, atualizar e remover bibliotecas (pacotes) de terceiros.

-   Gerenciar dependências de projetos Python.

-   Baixar pacotes do PyPI (*Python Package Index*), o repositório oficial de bibliotecas Python.

#### **2. Como instalar pacotes com pip install**

-   **Sintaxe básica** (no terminal/CMD):

    bash

    ```         
    pip install nome_do_pacote
    ```

-   **Exemplos**:

    bash

    ```         
    pip install pandas       # Instala a biblioteca Pandas pip install numpy==1.21.0  # Instala uma versão específica do NumPy pip install --upgrade requests  # Atualiza a biblioteca Requests
    ```

<!-- -->

-   **Instalar múltiplos pacotes** (via arquivo **`requirements.txt`**):

    bash

    ```         
    pip install -r requirements.txt
    ```

#### **3. Exemplos de Bibliotecas Populares**

| **Biblioteca** | **Função Principal** | **Exemplo de Uso** |
|:---|:---|:---|
| **Pandas** | Manipulação e análise de dados (DataFrames). | **`import pandas as pd`** |
| **NumPy** | Computação numérica com arrays multidimensionais. | **`import numpy as np`** |
| **Matplotlib** | Criação de gráficos e visualizações. | **`import matplotlib.pyplot as plt`** |
| **Requests** | Envio de requisições HTTP para APIs. | **`import requests`** |

### **Conceitos Iniciais de Python**

#### **1. Tipos de Dados Básicos**

Python possui tipos de dados primários para representar diferentes valores:

| **Tipo**  | **Descrição**                        | **Exemplo**       |
|:----------|:-------------------------------------|:------------------|
| **int**   | Números inteiros                     | **idade = 25**    |
| **float** | Números decimais                     | **altura = 1.75** |
| **str**   | Texto (cadeia de caracteres)         | **nome = "Ana"**  |
| **bool**  | Valores lógicos (**True**/**False**) | **ativo = True**  |

#### **2. Variáveis e Operadores Básicos**

-   **Variáveis**: Nomes que armazenam valores (não precisam declarar tipo).

    python

    ```         
    preco = 19.99   mensagem = "Olá, mundo!"  
    ```

-   **Operadores**:

    -   Aritméticos: **+**, **-**, **\***, **/**, **//** (divisão inteira), **\*\*** (potência).

    -   Comparação: **==**, **!=**, **\>**, **\<**, **\>=**, **\<=**.

    -   Lógicos: **and**, **or**, **not**.

    #### **3. Estruturas de Dados**

    | **Estrutura** | **Características** | **Exemplo** |
    |:---|:---|:---|
    | **Listas** | Mutáveis, ordenadas, colchetes **\[\]** | **frutas = \["maçã", "banana"\]** |
    | **Tuplas** | Imutáveis, parênteses **()** | **coordenadas = (10, 20)** |
    | **Dicionários** | Pares **chave: valor**, chaves únicas, chaves **{}** | **pessoa = {"nome": "Carlos", "idade": 30}** |

#### **4. Estruturas de Controle**

-   **Condicionais**:

    python

    ```         
    if nota >= 7:       print("Aprovado!")   elif nota >= 5:       print("Recuperação")   else:       print("Reprovado")  
    ```

**Laços**:

python

```         
# for (iteração em sequências)   for i in range(5):  # 0, 1, 2, 3, 4       print(i)    # while (executa enquanto condição for verdadeira)   contador = 0   while contador < 3:       print(contador)       contador += 1  
```

#### **5. Funções**

-   **Definição**:

    python

    ```         
    def saudacao(nome):       return f"Olá, {nome}!"    mensagem = saudacao("Maria")  # Chama a função  
    ```

-   **Parâmetros**: Podem ter valores padrão (**`def soma(a, b=1)`**).

-   **Retorno**: **`return`** envia o resultado (se omitido, retorna **`None`**).

#### **6. Importação de Bibliotecas**

-   **Sintaxe**:

    python

    ```         
    import math                     # Importa tudo   from math import sqrt           # Importa apenas sqrt   import pandas as pd             # Alias (apelido)  
    ```

#### **7. Boas Práticas**

-   **Comentários**: Use **`#`** para linhas únicas ou **`"""`** para docstrings.

    python

    ```         
    # Calcula a média   media = (nota1 + nota2) / 2  
    ```

-   **Nomes de variáveis**:

    -   Claros e descritivos (**`idade`** em vez de **`x`**).

    -   Snake_case: **`nome_completo`**.

-   **Indentação**: Blocos são definidos por espaços (4 por nível).

    python

    ```         
    if condicao:       print("Indentação correta!")  # 4 espaços  
    ```